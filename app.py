import pandas as pd
import plotly.express as px
import streamlit as st
from predict import predict

# Data
cp_df = {
    1: "Angina t√≠pica",
    2: "Angina at√≠pica",
    3: "Dor n√£o anginosa",
    4: "Assintom√°tico",
}
sex_df = {0: "Feminino", 1: "Masculino"}
restecg_df = {
    0: "Normal",
    1: "Tendo anormalidade na onda ST-T",
    2: "Mostrando hipertrofia ventricular esquerda prov√°vel ou definitiva",
}
slope_df = {1: "Inclinando-se para cima", 2: "Plano", 3: "Inclinando-se para baixo"}
thal_df = {3: "Normal", 6: "Defeito fixo", 7: "Defeito revers√≠vel"}

# config
st.set_page_config(page_title="Predi√ß√£o de doen√ßas card√≠acas", page_icon="ü´Ä")


# caching dataframe
@st.cache_data  # üëà Add the caching decorator
def load_data(url):
    df = pd.read_csv(url)
    return df


# cachingg model
@st.cache_resource
def run_model(inputs):
    return predict(inputs)


df = load_data("model/Heart_disease_cleveland_new.csv")

st.markdown(
    """
Este MVP foi constru√≠do baseado em um conjunto de dados de doen√ßas card√≠acas feita em Cleveland Clinic Foundation. Esse conjunto de dados √© muito conhecido na comunidade cient√≠fica, e por isso nos proporcia outros experiementos para comparar o real desempenho do nosso modelo. como resultado obtivemos um modelo com acuracia de 94% 

Esse √© um MVP para *aux√≠lio* de diagn√≥stico de doen√ßas card√≠acas. N√£o deve ser usado por n√£o profissionais da √°rea m√©dica, nem substituir um m√©dico profissinal.
            """
)
st.subheader("Prencha abaixo os campos para saber o diagn√≥stico")

with st.form("Formulario"):
    col1, col2 = st.columns(2)
    with col1:

        age = st.number_input("Digite a idade", min_value=1, key="age")
        sex = st.radio(
            "Sexo", options=[0, 1], format_func=lambda x: sex_df[x], key="sex"
        )
        cp = st.selectbox(
            "Tipo de dor no peito:",
            options=[1, 2, 3, 4],
            format_func=lambda x: cp_df[x],
            key="cp",
        )
        trestbps = st.number_input(
            "Press√£o arterial em repouso (mmHg)", min_value=0, key="trestbps"
        )
        chol = st.number_input("Colesterol s√©rico em mg/dl", min_value=0, key="chol")
        fbs = st.checkbox("Glicemia de jejum > 120 mg/dl ?", value=0, key="fbs")
        restecg = st.selectbox(
            "Resultados do eletrocardiograma em repouso",
            options=[0, 1, 2],
            format_func=lambda x: restecg_df[x],
            key="restecg",
        )
    with col2:
        thalach = st.number_input(
            "Frequ√™ncia card√≠aca m√°xima", min_value=1, key="thalach"
        )
        exang = st.checkbox("Angina induzida por exerc√≠cio ?", value=0, key="exang")
        oldpeak = st.number_input(
            "Depress√£o do segmento ST induzida pelo exerc√≠cio em rela√ß√£o ao repouso.",
            min_value=1.0,
            key="oldpeak",
        )
        slope = st.radio(
            "Inclina√ß√£o do segmento ST de pico do exerc√≠cio",
            options=[1, 2, 3],
            format_func=lambda x: slope_df[x],
            key="slope",
        )
        ca = st.number_input(
            "N√∫mero de grandes vasos (0-3) coloridos por fluoroscopia.",
            min_value=0,
            max_value=3,
            key="ca",
        )
        thal = st.radio(
            "Resultados do teste de estresse nuclear",
            options=[3, 6, 7],
            format_func=lambda x: thal_df[x],
            key="thal",
        )

    submit = st.form_submit_button("Descubra")
    result = st.subheader("")

if submit:
    result_df = {
        "age": age,
        "sex": sex,
        "cp": cp,
        "trestbps": trestbps,
        "chol": chol,
        "fbs": fbs,
        "restecg": restecg,
        "thalach": thalach,
        "exang": exang,
        "oldpeak": oldpeak,
        "slope": slope,
        "ca": ca,
        "thal": thal,
    }
    result.subheader(
        f"Resultado foi {'Aus√™ncia de doen√ßa card√≠aca.' if run_model(result_df) == 0 else 'Presen√ßa de doen√ßa card√≠aca.'}"
    )

# Visualiza√ß√£o da distribui√ß√£o das idades
st.markdown(
    "Este histograma mostra a distribui√ß√£o da idade dos pacientes no dataset. A boxplot marginal ajuda a visualizar a dispers√£o e os outliers na distribui√ß√£o da idade. Podemos observar que a maioria dos pacientes est√° na faixa et√°ria entre 50 e 60 anos, o que pode indicar que doen√ßas card√≠acas s√£o mais comuns nesta faixa et√°ria."
)
fig = px.histogram(df, x="age", nbins=20, title="Distribui√ß√£o da Idade", marginal="box")
st.plotly_chart(fig, use_container_width=True)

# Matriz de correla√ß√£o
st.markdown(
    "A matriz de correla√ß√£o mostra a rela√ß√£o entre todas as vari√°veis do dataset. Cores mais escuras representam correla√ß√µes mais fortes (positivas ou negativas). Observamos que a vari√°vel thalach (frequ√™ncia card√≠aca m√°xima) tem uma correla√ß√£o negativa moderada com a presen√ßa de doen√ßa card√≠aca (num), enquanto oldpeak (depress√£o do ST) tem uma correla√ß√£o positiva moderada com a doen√ßa card√≠aca. Isso sugere que pacientes com frequ√™ncia card√≠aca m√°xima menor e maior depress√£o do ST t√™m maior probabilidade de ter doen√ßa card√≠aca."
)
corr = df.corr()
fig_corr = px.imshow(corr, text_auto=True, title="Matriz de Correla√ß√£o")
st.plotly_chart(fig_corr, use_container_width=True)

# Gr√°fico de dispers√£o interativo
st.markdown(
    "Neste gr√°fico de dispers√£o interativo mostra a rela√ß√£o entre idade e colesterol, com pontos coloridos pela presen√ßa de doen√ßa card√≠aca (num). Pacientes com doen√ßa card√≠aca (indicados pela cor) tendem a ter n√≠veis de colesterol mais elevados e podem ser encontrados em v√°rias faixas et√°rias. No entanto, n√£o h√° uma clara distin√ß√£o de idade e colesterol para a presen√ßa de doen√ßa card√≠aca, indicando que outros fatores tamb√©m podem influenciar a condi√ß√£o."
)
fig_scatter = px.scatter(
    df,
    x="age",
    y="chol",
    color="target",
    title="Rela√ß√£o entre Idade e Colesterol colorido por Diagn√≥stico de Doen√ßa Card√≠aca",
    labels={"target": "Diagn√≥stico de Doen√ßa Card√≠aca (0 = N√£o, 1 = Sim)"},
    hover_data=["trestbps", "thalach", "oldpeak"],
)

fig_scatter.update_layout(legend_title_text="Doen√ßa Card√≠aca")
st.plotly_chart(fig_scatter, use_container_width=True)
